use std::io::{Error, ErrorKind, Result};

use super::beckhoff;

#[rustfmt::skip]
pub fn process(code: i32) -> Result<()> {
    match code as u32 {
        beckhoff::ADSERR_NOERR                       => Ok(()),
        beckhoff::ADSERR_DEVICE_ERROR                => Err(Error::new(ErrorKind::Other, "Error class < device error >")),
        beckhoff::ADSERR_DEVICE_SRVNOTSUPP           => Err(Error::new(ErrorKind::Other, "Service is not supported by server")),
        beckhoff::ADSERR_DEVICE_INVALIDGRP           => Err(Error::new(ErrorKind::Other, "invalid indexGroup")),
        beckhoff::ADSERR_DEVICE_INVALIDOFFSET        => Err(Error::new(ErrorKind::Other, "invalid indexOffset")),
        beckhoff::ADSERR_DEVICE_INVALIDACCESS        => Err(Error::new(ErrorKind::Other, "reading/writing not permitted")),
        beckhoff::ADSERR_DEVICE_INVALIDSIZE          => Err(Error::new(ErrorKind::Other, "parameter size not correct")),
        beckhoff::ADSERR_DEVICE_INVALIDDATA          => Err(Error::new(ErrorKind::Other, "invalid parameter value(s)")),
        beckhoff::ADSERR_DEVICE_NOTREADY             => Err(Error::new(ErrorKind::Other, "device is not in a ready state")),
        beckhoff::ADSERR_DEVICE_BUSY                 => Err(Error::new(ErrorKind::Other, "device is busy")),
        beckhoff::ADSERR_DEVICE_INVALIDCONTEXT       => Err(Error::new(ErrorKind::Other, "invalid context (must be InWindows)")),
        beckhoff::ADSERR_DEVICE_NOMEMORY             => Err(Error::new(ErrorKind::Other, "out of memory")),
        beckhoff::ADSERR_DEVICE_INVALIDPARM          => Err(Error::new(ErrorKind::Other, "invalid parameter value(s)")),
        beckhoff::ADSERR_DEVICE_NOTFOUND             => Err(Error::new(ErrorKind::Other, "not found (files, ...)")),
        beckhoff::ADSERR_DEVICE_SYNTAX               => Err(Error::new(ErrorKind::Other, "syntax error in comand or file")),
        beckhoff::ADSERR_DEVICE_INCOMPATIBLE         => Err(Error::new(ErrorKind::Other, "objects do not match")),
        beckhoff::ADSERR_DEVICE_EXISTS               => Err(Error::new(ErrorKind::Other, "object already exists")),
        beckhoff::ADSERR_DEVICE_SYMBOLNOTFOUND       => Err(Error::new(ErrorKind::Other, "symbol not found")),
        beckhoff::ADSERR_DEVICE_SYMBOLVERSIONINVALID => Err(Error::new(ErrorKind::Other, "symbol version invalid")),
        beckhoff::ADSERR_DEVICE_INVALIDSTATE         => Err(Error::new(ErrorKind::Other, "server is in invalid state")),
        beckhoff::ADSERR_DEVICE_TRANSMODENOTSUPP     => Err(Error::new(ErrorKind::Other, "AdsTransMode not supported")),
        beckhoff::ADSERR_DEVICE_NOTIFYHNDINVALID     => Err(Error::new(ErrorKind::Other, "Notification handle is invalid")),
        beckhoff::ADSERR_DEVICE_CLIENTUNKNOWN        => Err(Error::new(ErrorKind::Other, "Notification client not registered")),
        beckhoff::ADSERR_DEVICE_NOMOREHDLS           => Err(Error::new(ErrorKind::Other, "no more notification handles")),
        beckhoff::ADSERR_DEVICE_INVALIDWATCHSIZE     => Err(Error::new(ErrorKind::Other, "size for watch to big")),
        beckhoff::ADSERR_DEVICE_NOTINIT              => Err(Error::new(ErrorKind::Other, "device not initialized")),
        beckhoff::ADSERR_DEVICE_TIMEOUT              => Err(Error::new(ErrorKind::Other, "device has a timeout")),
        beckhoff::ADSERR_DEVICE_NOINTERFACE          => Err(Error::new(ErrorKind::Other, "query interface failed")),
        beckhoff::ADSERR_DEVICE_INVALIDINTERFACE     => Err(Error::new(ErrorKind::Other, "wrong interface required")),
        beckhoff::ADSERR_DEVICE_INVALIDCLSID         => Err(Error::new(ErrorKind::Other, "class ID is invalid")),
        beckhoff::ADSERR_DEVICE_INVALIDOBJID         => Err(Error::new(ErrorKind::Other, "object ID is invalid")),
        beckhoff::ADSERR_DEVICE_PENDING              => Err(Error::new(ErrorKind::Other, "request is pending")),
        beckhoff::ADSERR_DEVICE_ABORTED              => Err(Error::new(ErrorKind::Other, "request is aborted")),
        beckhoff::ADSERR_DEVICE_WARNING              => Err(Error::new(ErrorKind::Other, "signal warning")),
        beckhoff::ADSERR_DEVICE_INVALIDARRAYIDX      => Err(Error::new(ErrorKind::Other, "invalid array index")),
        beckhoff::ADSERR_DEVICE_SYMBOLNOTACTIVE      => Err(Error::new(ErrorKind::Other, "symbol not active -> release handle and try again")),
        beckhoff::ADSERR_DEVICE_ACCESSDENIED         => Err(Error::new(ErrorKind::Other, "access denied")),
        beckhoff::ADSERR_DEVICE_LICENSENOTFOUND      => Err(Error::new(ErrorKind::Other, "no license found")),
        beckhoff::ADSERR_DEVICE_LICENSEEXPIRED       => Err(Error::new(ErrorKind::Other, "license expired")),
        beckhoff::ADSERR_DEVICE_LICENSEEXCEEDED      => Err(Error::new(ErrorKind::Other, "license exceeded")),
        beckhoff::ADSERR_DEVICE_LICENSEINVALID       => Err(Error::new(ErrorKind::Other, "license invalid")),
        beckhoff::ADSERR_DEVICE_LICENSESYSTEMID      => Err(Error::new(ErrorKind::Other, "license invalid system id")),
        beckhoff::ADSERR_DEVICE_LICENSENOTIMELIMIT   => Err(Error::new(ErrorKind::Other, "license not time limited")),
        beckhoff::ADSERR_DEVICE_LICENSEFUTUREISSUE   => Err(Error::new(ErrorKind::Other, "license issue time in the future")),
        beckhoff::ADSERR_DEVICE_LICENSETIMETOLONG    => Err(Error::new(ErrorKind::Other, "license time period to long")),
        beckhoff::ADSERR_DEVICE_EXCEPTION            => Err(Error::new(ErrorKind::Other, "exception in device specific code")),
        beckhoff::ADSERR_DEVICE_LICENSEDUPLICATED    => Err(Error::new(ErrorKind::Other, "license file read twice")),
        beckhoff::ADSERR_DEVICE_SIGNATUREINVALID     => Err(Error::new(ErrorKind::Other, "invalid signature")),
        beckhoff::ADSERR_DEVICE_CERTIFICATEINVALID   => Err(Error::new(ErrorKind::Other, "public key certificate")),
//
        beckhoff::ADSERR_CLIENT_ERROR                => Err(Error::new(ErrorKind::Other, "Error class < client error >")),
        beckhoff::ADSERR_CLIENT_INVALIDPARM          => Err(Error::new(ErrorKind::Other, "invalid parameter at service call")),
        beckhoff::ADSERR_CLIENT_LISTEMPTY            => Err(Error::new(ErrorKind::Other, "polling list	is empty")),
        beckhoff::ADSERR_CLIENT_VARUSED              => Err(Error::new(ErrorKind::Other, "var connection already in use")),
        beckhoff::ADSERR_CLIENT_DUPLINVOKEID         => Err(Error::new(ErrorKind::Other, "invoke id in use")),
        beckhoff::ADSERR_CLIENT_SYNCTIMEOUT          => Err(Error::new(ErrorKind::Other, "timeout elapsed")),
        beckhoff::ADSERR_CLIENT_W32ERROR             => Err(Error::new(ErrorKind::Other, "error in win32 subsystem")),
        beckhoff::ADSERR_CLIENT_TIMEOUTINVALID       => Err(Error::new(ErrorKind::Other, "?")),
        beckhoff::ADSERR_CLIENT_PORTNOTOPEN          => Err(Error::new(ErrorKind::Other, "ads dll")),
        beckhoff::ADSERR_CLIENT_NOAMSADDR            => Err(Error::new(ErrorKind::Other, "ads dll")),
        beckhoff::ADSERR_CLIENT_SYNCINTERNAL         => Err(Error::new(ErrorKind::Other, "internal error in ads sync")),
        beckhoff::ADSERR_CLIENT_ADDHASH              => Err(Error::new(ErrorKind::Other, "hash table overflow")),
        beckhoff::ADSERR_CLIENT_REMOVEHASH           => Err(Error::new(ErrorKind::Other, "key not found in hash table")),
        beckhoff::ADSERR_CLIENT_NOMORESYM            => Err(Error::new(ErrorKind::Other, "no more symbols in cache")),
        beckhoff::ADSERR_CLIENT_SYNCRESINVALID       => Err(Error::new(ErrorKind::Other, "invalid response received")),
        beckhoff::ADSERR_CLIENT_SYNCPORTLOCKED       => Err(Error::new(ErrorKind::Other, "sync port is locked")),

        _ => Err(Error::new(ErrorKind::Other, format!("Undocumented error {code}"))),
    }
}
