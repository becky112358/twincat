use std::io::{Error, Result};

use super::beckhoff;

#[rustfmt::skip]
pub fn process(code: i32) -> Result<()> {
    match code as u32 {
        beckhoff::ADSERR_NOERR                       => Ok(()),

        0x01                                         => error(code, "Internal error"),
        0x02                                         => error(code, "No real time"),
        0x03                                         => error(code, "Allocation locked - memory error"),
        0x04                                         => error(code, "Mailbox full - the ADS message could not be sent. Reducing the number of ADS messages per cycle will help."),
        0x05                                         => error(code, "Wrong HMSG"),
        0x06                                         => error(code, "Target port not found - ADS server is not started or is not reachable"),
        0x07                                         => error(code, "Target computer not found - AMS route was not found"),
        0x08                                         => error(code, "Unknown command ID"),
        0x09                                         => error(code, "Invalid task ID"),
        0x0a                                         => error(code, "No IO"),
        0x0b                                         => error(code, "Unknown AMS command"),
        0x0c                                         => error(code, "Win32 error"),
        0x0d                                         => error(code, "Port not connected"),
        0x0e                                         => error(code, "Invalid AMS length"),
        0x0f                                         => error(code, "Invalid AMS Net ID"),
        0x10                                         => error(code, "Installation level is too low - TwinCAT 2 license error"),
        0x11                                         => error(code, "No debugging available"),
        0x12                                         => error(code, "Port disabled - TwinCAT system service not started"),
        0x13                                         => error(code, "Port already connected"),
        0x14                                         => error(code, "AMS Sync Win32 error"),
        0x15                                         => error(code, "AMS Sync Timeout"),
        0x16                                         => error(code, "AMS Sync error"),
        0x17                                         => error(code, "No index map for AMS Sync available"),
        0x18                                         => error(code, "Invalid AMS port"),
        0x19                                         => error(code, "No memory"),
        0x1a                                         => error(code, "TCP send error"),
        0x1b                                         => error(code, "Host unreachable"),
        0x1c                                         => error(code, "Invalid AMS fragment"),
        0x1d                                         => error(code, "TLS send error - secure ADS connection failed"),
        0x1e                                         => error(code, "Access denied - secure ADS access denied"),

        0x500                                        => error(code, "Locked memory cannot be allocated"),
        0x501                                        => error(code, "The router memory size could not be changed"),
        0x502                                        => error(code, "The mailbox has reached the maximum number of possible messages"),
        0x503                                        => error(code, "The Debug mailbox has reached the maximum number of possible messages"),
        0x504                                        => error(code, "The port type is unknown"),
        0x505                                        => error(code, "The router is not initialized"),
        0x506                                        => error(code, "The port number is already assigned"),
        0x507                                        => error(code, "The port is not registered"),
        0x508                                        => error(code, "The maximum number of ports has been reached"),
        0x509                                        => error(code, "The port is invalid"),
        0x50a                                        => error(code, "The router is not active"),
        0x50b                                        => error(code, "The mailbox has reached the maximum number for fragmented messages"),
        0x50c                                        => error(code, "A fragment timeout has occurred"),
        0x50d                                        => error(code, "The port is removed"),

        beckhoff::ADSERR_DEVICE_ERROR                => error(code, "Error class < device error >"),
        beckhoff::ADSERR_DEVICE_SRVNOTSUPP           => error(code, "Service is not supported by server"),
        beckhoff::ADSERR_DEVICE_INVALIDGRP           => error(code, "invalid indexGroup"),
        beckhoff::ADSERR_DEVICE_INVALIDOFFSET        => error(code, "invalid indexOffset"),
        beckhoff::ADSERR_DEVICE_INVALIDACCESS        => error(code, "reading/writing not permitted"),
        beckhoff::ADSERR_DEVICE_INVALIDSIZE          => error(code, "parameter size not correct"),
        beckhoff::ADSERR_DEVICE_INVALIDDATA          => error(code, "invalid parameter value(s)"),
        beckhoff::ADSERR_DEVICE_NOTREADY             => error(code, "device is not in a ready state"),
        beckhoff::ADSERR_DEVICE_BUSY                 => error(code, "device is busy"),
        beckhoff::ADSERR_DEVICE_INVALIDCONTEXT       => error(code, "invalid context (must be InWindows)"),
        beckhoff::ADSERR_DEVICE_NOMEMORY             => error(code, "out of memory"),
        beckhoff::ADSERR_DEVICE_INVALIDPARM          => error(code, "invalid parameter value(s)"),
        beckhoff::ADSERR_DEVICE_NOTFOUND             => error(code, "not found (files, ...)"),
        beckhoff::ADSERR_DEVICE_SYNTAX               => error(code, "syntax error in comand or file"),
        beckhoff::ADSERR_DEVICE_INCOMPATIBLE         => error(code, "objects do not match"),
        beckhoff::ADSERR_DEVICE_EXISTS               => error(code, "object already exists"),
        beckhoff::ADSERR_DEVICE_SYMBOLNOTFOUND       => error(code, "symbol not found"),
        beckhoff::ADSERR_DEVICE_SYMBOLVERSIONINVALID => error(code, "symbol version invalid"),
        beckhoff::ADSERR_DEVICE_INVALIDSTATE         => error(code, "server is in invalid state"),
        beckhoff::ADSERR_DEVICE_TRANSMODENOTSUPP     => error(code, "AdsTransMode not supported"),
        beckhoff::ADSERR_DEVICE_NOTIFYHNDINVALID     => error(code, "Notification handle is invalid"),
        beckhoff::ADSERR_DEVICE_CLIENTUNKNOWN        => error(code, "Notification client not registered"),
        beckhoff::ADSERR_DEVICE_NOMOREHDLS           => error(code, "no more notification handles"),
        beckhoff::ADSERR_DEVICE_INVALIDWATCHSIZE     => error(code, "size for watch to big"),
        beckhoff::ADSERR_DEVICE_NOTINIT              => error(code, "device not initialized"),
        beckhoff::ADSERR_DEVICE_TIMEOUT              => error(code, "device has a timeout"),
        beckhoff::ADSERR_DEVICE_NOINTERFACE          => error(code, "query interface failed"),
        beckhoff::ADSERR_DEVICE_INVALIDINTERFACE     => error(code, "wrong interface required"),
        beckhoff::ADSERR_DEVICE_INVALIDCLSID         => error(code, "class ID is invalid"),
        beckhoff::ADSERR_DEVICE_INVALIDOBJID         => error(code, "object ID is invalid"),
        beckhoff::ADSERR_DEVICE_PENDING              => error(code, "request is pending"),
        beckhoff::ADSERR_DEVICE_ABORTED              => error(code, "request is aborted"),
        beckhoff::ADSERR_DEVICE_WARNING              => error(code, "signal warning"),
        beckhoff::ADSERR_DEVICE_INVALIDARRAYIDX      => error(code, "invalid array index"),
        beckhoff::ADSERR_DEVICE_SYMBOLNOTACTIVE      => error(code, "symbol not active -> release handle and try again"),
        beckhoff::ADSERR_DEVICE_ACCESSDENIED         => error(code, "access denied"),
        beckhoff::ADSERR_DEVICE_LICENSENOTFOUND      => error(code, "no license found"),
        beckhoff::ADSERR_DEVICE_LICENSEEXPIRED       => error(code, "license expired"),
        beckhoff::ADSERR_DEVICE_LICENSEEXCEEDED      => error(code, "license exceeded"),
        beckhoff::ADSERR_DEVICE_LICENSEINVALID       => error(code, "license invalid"),
        beckhoff::ADSERR_DEVICE_LICENSESYSTEMID      => error(code, "license invalid system id"),
        beckhoff::ADSERR_DEVICE_LICENSENOTIMELIMIT   => error(code, "license not time limited"),
        beckhoff::ADSERR_DEVICE_LICENSEFUTUREISSUE   => error(code, "license issue time in the future"),
        beckhoff::ADSERR_DEVICE_LICENSETIMETOLONG    => error(code, "license time period to long"),
        beckhoff::ADSERR_DEVICE_EXCEPTION            => error(code, "exception in device specific code"),
        beckhoff::ADSERR_DEVICE_LICENSEDUPLICATED    => error(code, "license file read twice"),
        beckhoff::ADSERR_DEVICE_SIGNATUREINVALID     => error(code, "invalid signature"),
        beckhoff::ADSERR_DEVICE_CERTIFICATEINVALID   => error(code, "public key certificate"),

        0x730                                        => error(code, "Public key not known from OEM"),
        0x731                                        => error(code, "License not valid for this system ID"),
        0x732                                        => error(code, "Demo license prohibited"),
        0x733                                        => error(code, "Invalid function ID"),
        0x734                                        => error(code, "Outside the valid range"),
        0x735                                        => error(code, "Invalid alignment"),
        0x736                                        => error(code, "Invalid platform level"),
        0x737                                        => error(code, "Context - forward to passive level"),
        0x738                                        => error(code, "Context - forward to dispatch level"),
        0x739                                        => error(code, "Context - forward to real time"),

        beckhoff::ADSERR_CLIENT_ERROR                => error(code, "Error class < client error >"),
        beckhoff::ADSERR_CLIENT_INVALIDPARM          => error(code, "invalid parameter at service call"),
        beckhoff::ADSERR_CLIENT_LISTEMPTY            => error(code, "polling list is empty"),
        beckhoff::ADSERR_CLIENT_VARUSED              => error(code, "var connection already in use"),
        beckhoff::ADSERR_CLIENT_DUPLINVOKEID         => error(code, "invoke id in use"),
        beckhoff::ADSERR_CLIENT_SYNCTIMEOUT          => error(code, "timeout elapsed"),
        beckhoff::ADSERR_CLIENT_W32ERROR             => error(code, "error in win32 subsystem"),
        beckhoff::ADSERR_CLIENT_TIMEOUTINVALID       => error(code, "?"),
        beckhoff::ADSERR_CLIENT_PORTNOTOPEN          => error(code, "ads dll"),
        beckhoff::ADSERR_CLIENT_NOAMSADDR            => error(code, "ads dll"),
        beckhoff::ADSERR_CLIENT_SYNCINTERNAL         => error(code, "internal error in ads sync"),
        beckhoff::ADSERR_CLIENT_ADDHASH              => error(code, "hash table overflow"),
        beckhoff::ADSERR_CLIENT_REMOVEHASH           => error(code, "key not found in hash table"),
        beckhoff::ADSERR_CLIENT_NOMORESYM            => error(code, "no more symbols in cache"),
        beckhoff::ADSERR_CLIENT_SYNCRESINVALID       => error(code, "invalid response received"),
        beckhoff::ADSERR_CLIENT_SYNCPORTLOCKED       => error(code, "sync port is locked"),
        0x756                                        => error(code, "The request was cancelled"),

        0x1000                                       => error(code, "Internal error in the real-time system"),
        0x1001                                       => error(code, "Timer value is not valid"),
        0x1002                                       => error(code, "Task pointer has the invalid value 0 (zero)"),
        0x1003                                       => error(code, "Stack pointer has the invalid value 0 (zero)"),
        0x1004                                       => error(code, "The request task priority is already assigned"),
        0x1005                                       => error(code, "No free TCB (Task Control Block) available. The maximum number of TCBs is 64."),
        0x1006                                       => error(code, "No free semaphores available. The maximum number of semaphores is 64."),
        0x1007                                       => error(code, "No free space available in the queue. THe maximum number of positions in the queue is 64."),
        0x100d                                       => error(code, "An external synchronization interrupt is already applied"),
        0x100e                                       => error(code, "No external sync interrupt applied"),
        0x100f                                       => error(code, "Application of the external synchronization interrupt has failed"),
        0x1010                                       => error(code, "Call of a service function in the wrong context"),
        0x1017                                       => error(code, "Intel VT-x extension is not supported"),
        0x1018                                       => error(code, "Intel VT-x extension is not enabled in the BIOS"),
        0x1019                                       => error(code, "Missing function in Intel VT-x extension"),
        0x101a                                       => error(code, "Activation of Intel VT-x fails"),

        _                                            => error(code, "Undocumented error"),
    }
}

fn error(code: i32, text: &str) -> Result<()> {
    Err(Error::other(format!("Error code {code:#06x} : {text}")))
}
